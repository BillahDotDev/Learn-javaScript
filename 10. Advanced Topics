*** Advanced Topics

• Closures:
◦ Definition: Closures occur when a function is able to remember and access its 
lexical scope even when it's executed outside that scope.

◦ Use cases: Closures are commonly used for data encapsulation, creating 

private variables, and maintaining state in functional programming.

◦ Example:
          function outer() {
              let count = 0;
              return function inner() {
                  count++;
                  console.log(count);
              }
          }
          const increment = outer();
          increment(); // Output: 1
          increment(); // Output: 2

• Currying and Partial Application:

◦ Definition: Currying is the process of converting a function with multiple 
arguments into a series of functions, each taking a single argument. 
Partial application is a technique where a function is applied to some of 
its arguments, returning a new function that takes the remaining arguments.

◦ Use cases: Currying and partial application enable function composition, 
code reuse, and creating specialized versions of functions.

◦ Example:

          function add(a, b) {
              return a + b;
          }
          const addCurried = (a) => (b) => a + b;
          const add5 = addCurried(5);
          console.log(add5(3)); // Output: 8

• Memoization:
◦ Definition: Memoization is a technique used to cache the results of expensive 
function calls and return the cached result when the same inputs occur again.
◦ Use cases: Memoization is useful for optimizing functions that perform 
heavy computations or expensive operations.

◦ Example: 
          function memoize(func) {
              const cache = {};
              return function(...args) {
                  const key = JSON.stringify(args);
                  if (!cache[key]) {
                      cache[key] = func(...args);
                  }
                  return cache[key];
              };
          }
          const memoizedAdd = memoize((a, b) => {
              console.log('Calculating sum...');
              return a + b;
          });
          console.log(memoizedAdd(2, 3)); // Output: Calculating sum... 5
          console.log(memoizedAdd(2, 3)); // Output: 5 (result retrieved from cache)
