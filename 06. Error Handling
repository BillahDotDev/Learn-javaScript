# Error Handling

***1. Try/Catch/Finally:

Try Block:
----------
• The try block is used to enclose the code that might throw an exception.
• If an exception occurs within the try block, the control immediately jumps to the catch block.

Catch Block:
-----------
• The catch block follows the try block and is used to handle exceptions.
• It takes an error parameter, which represents the error object thrown by the try block.
• You can specify multiple catch blocks to handle different types of errors.

Finally Block:
--------------
• The finally block follows the try and catch blocks (if present) and is executed regardless 
of whether an exception occurred.
• It is commonly used for cleanup tasks such as closing files or releasing resources.
• The finally block is optional.

Example:
-------

try {
    // Code that might throw an exception
    console.log(undefinedVariable);
} catch(error) {
    // Handling the exception
    console.error("An error occurred:", error);
} finally {
    // Cleanup code
    console.log("This code always runs, regardless of whether there was an error or not.");
}


***2. Throwing Errors:
throw Statement:

• The throw statement is used to manually generate an error or exception.
• It can throw any value, but it's common to throw instances of Error or its subclasses.
