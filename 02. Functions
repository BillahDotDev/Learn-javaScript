# function 
1. Function Declaration vs. Function Expression:
◦ Declaration: Declared using the function keyword followed by the function name and parameters.

function greet(name) {
  return `Hello, ${name}!`;
}
◦ Expression: Assigned to a variable. Can be named (function expression) or anonymous (anonymous function expression).

const greet = function(name) {
  return `Hello, ${name}!`;
};

2. Parameters and Arguments:
  ◦ Parameters: Variables listed as a part of the function definition.
  ◦ Arguments: Values passed to the function when it's called.

3. Anonymous Functions:
    ◦ Functions without a name. Often used as arguments to other functions or as IIFE (Immediately Invoked Function Expression).
  
   setTimeout(function() {
       console.log('This is an anonymous function');

4. Arrow Functions:
    ◦ Introduced in ES6, providing a concise syntax, lexical this binding, and implicit return.
   
   const add = (a, b) => a + b;

5. Higher-Order Functions:
    ◦ Functions that can accept other functions as arguments or return functions.

   const operate = (a, b, operation) => operation(a, b);
   const result = operate(5, 3, (a, b) => a + b); // Result will be 8

6. Scope and Closures:
    ◦ Functions create a scope in JavaScript, meaning variables defined inside a function are not accessible outside unless explicitly returned or enclosed in a closure.
  
   function outer() {
       const x = 10;
       function inner() {
           console.log(x); // Inner function has access to the outer function's variable (closure)
       }
       return inner;
   }
   const innerFn = outer();
   innerFn(); // Will log 10






