//Objects and Prototypes  
1. Objects:
◦ In JavaScript, objects are collections of key-value pairs, where the keys are strings (or Symbols) 
and the values can be of any data type.
◦ Objects can be created using either object literals {}, the new Object() syntax, or by instantiating 
custom constructor functions using the new keyword.

// Object literal
const person = {
   name: 'John',
   age: 30,
   greet() {
       console.log(`Hello, my name is ${this.name}!`);
   }
};

// Constructor function
function Person(name, age) {
   this.name = name;
   this.age = age;
}

const person2 = new Person('Alice', 25);

2. Prototypes:
  ◦ In JavaScript, every object has an internal link to another object called its prototype. 
This prototype object, in turn, may also have a prototype, creating a prototype chain.
  ◦ When you try to access a property or method of an object, JavaScript first looks for it on 
the object itself. If it doesn't find it, it continues to search up the prototype chain until it 
finds the property or until it reaches the end of the chain (the prototype of Object).
  ◦ Prototypes enable inheritance in JavaScript, allowing objects to inherit properties and methods from their prototypes.
 
 // Adding a method to the prototype
 Person.prototype.greet = function() {
     console.log(`Hello, my name is ${this.name}!`);
 };
 
 person2.greet(); // Output: Hello, my name is Alice!


3. Inheritance:
  ◦ JavaScript's prototype-based inheritance allows objects to inherit properties and methods from other objects.
  ◦ You can achieve inheritance by setting an object's prototype to another object's prototype.
 
 // Inheriting from Person
 function Student(name, age, grade) {
     Person.call(this, name, age);
     this.grade = grade;
 }
 
 Student.prototype = Object.create(Person.prototype);
 Student.prototype.constructor = Student;
 
 const student = new Student('Bob', 20, 'A');
 student.greet(); // Output: Hello, my name is Bob!

4. Class Syntax (ES6):
  ◦ ES6 introduced a class syntax that simplifies the creation of objects with constructors and inheritance, 
although under the hood, it still uses prototypes.
 
 class Person {
     constructor(name, age) {
         this.name = name;
         this.age = age;
     }
     greet() {
         console.log(`Hello, my name is ${this.name}!`);
     }
 }
 
 class Student extends Person {
     constructor(name, age, grade) {
         super(name, age);
         this.grade = grade;
     }
 }
 
 const student = new Student('Bob', 20, 'A');
 student.greet(); // Output: Hello, my name is Bob!







