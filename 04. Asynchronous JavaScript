// What is Asynchronous JavaScript?

Asynchronous JavaScript lets your code continue running without waiting for a particular task to complete. 
It's like being able to cook dinner while also doing the laundry; you can start cooking, 
then switch to laundry while the food is simmering, and come back to finish cooking when the laundry is done. 
This flexibility helps make your programs more responsive and efficient.

// Callbacks: Handling asynchronous operations with callbacks.

1. What are callbacks?
◦ Callbacks are functions that are passed as arguments to other functions.
◦ They are invoked (or called back) at some point in the future, typically after an asynchronous operation has completed.

2. How are callbacks used?
◦ In asynchronous operations, such as fetching data from a server or reading a file, you provide a callback function to execute once the operation is finished.
◦ This allows you to continue with other tasks while waiting for the asynchronous operation to complete.

Example:

function fetchData(callback) {
 // Simulate fetching data asynchronously
 setTimeout(() => {
   const data = 'This is the fetched data';
   callback(data); // Call the callback function with the fetched data
 }, 2000);
}

// Define a callback function
function handleData(data) {
 console.log('Received data:', data);
}

// Call the fetchData function with the handleData callback
fetchData(handleData);


3. Pros and Cons:
◦ Pros:
    ▪ Callbacks are simple and widely supported in JavaScript.
    ▪ They allow you to maintain control flow in asynchronous code.
◦ Cons:
    ▪ Callbacks can lead to callback hell, a situation where multiple nested 
      callbacks make the code hard to read and maintain.
    ▪ Error handling can become complicated with deeply nested callbacks.


• Promises: Promise states (pending, fulfilled, rejected), chaining, error handling.
• Async/Await: Syntactic sugar for promises, async functions, await keyword.
• Event Loop: Understanding the event-driven nature of JavaScript, the call stack, and the event queue.
