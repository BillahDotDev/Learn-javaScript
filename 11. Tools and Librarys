# Tools and Libraries


*** Package Managers: npm, Yarn.

JavaScript package managers are essential tools for managing dependencies in your projects. Two of the most popular 
package managers are npm (Node Package Manager) and Yarn. Hereâ€™s an in-depth look at both of these package 
managers, their features and how to use them.

-----------------------------
** npm (Node Package Manager)
-----------------------------
npm is the default package manager for Node.js, and it is the largest software registry. It allows developers to 
install, share, and manage dependencies in their projects.

* Key Features:
1. Extensive Registry: Hosts over a million packages.
2. Version Control: Manages versions and dependencies of packages.
3. Scripts: Allows you to define scripts for various tasks like testing, building, and deploying.
4. Configurable: Various configuration options for proxies, registry settings, and authentication.


1. Installing npm
npm is bundled with Node.js. To install Node.js (and npm), you can download it from nodejs.org.

* Verify the installation:

        node -v
        npm -v

2. Initializing a Project

        npm init
This command will create a package.json file, which holds metadata about your project and its dependencies.

3. Installing Packages

        npm install <package-name>
This installs the package and adds it to your node_modules directory. To save it as a dependency in your package.json:

        npm install <package-name> --save

For development dependencies:

        npm install <package-name> --save-dev

4. Global Installation

npm install -g <package-name>
This installs the package globally, making it accessible from anywhere on your system.

5. Running Scripts
You can define scripts in package.json under the scripts field:

        "scripts": {
          "start": "node app.js",
          "test": "mocha"
        }


* Run a script:

        npm run start

6. Updating Packages

        npm update <package-name>


7. Uninstalling Packages

        npm uninstall <package-name>

* Advanced Features

1. Shrinkwrap (package-lock.json): Locks down the versions of a project's dependencies to ensure consistent installs.
2. Scopes: Namespaces for packages (e.g., @my-org/my-package).
3. Private Packages: Hosting private packages for internal use.
4. Audit: Security audit for dependencies.

        npm audit


----
Yarn
----

Yarn was developed by Facebook to address some shortcomings of npm, such as performance, security, and consistency. 
It is also used to manage dependencies in your projects.

* Key Features
1. Speed: Faster installations due to parallelization and caching.
2. Deterministic Installs: Ensures the same dependency tree structure across different installations.
3. Offline Mode: Can install dependencies even when offline if they were installed before.
4. Workspaces: Manage multiple packages within a single repository.


* Basic Usage

1. Installing Yarn
You can install Yarn using npm:

        npm install -g yarn

Verify the installation:

        yarn -v


