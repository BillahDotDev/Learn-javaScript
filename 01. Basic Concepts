                                                                  Variables
      Declaration and Initialization:
    • Declaration: In JavaScript, variables are declared using the var, let, or const keywords.
        ◦ var (function-scoped variable): Historically used for variable declaration but is now considered less preferable compared to let and const.
        ◦ let (block-scoped variable): Introduced in ES6 (ECMAScript 2015), preferred over var in most cases due to its block-level scoping.
        ◦ const (constant): Also introduced in ES6, used to declare variables whose value cannot be reassigned.

    • Initialization: Variables can be declared and assigned a value simultaneously.
      let x = 10;

    • Scope:
    • Global Scope: Variables declared outside of any function or block have global scope and can be accessed from anywhere in the code.
      var globalVar = 5;
      console.log(globalVar); // Output: 5

    • Function Scope: Variables declared inside a function have function scope and can only be accessed within that function.
      function myFunction() {
          var localVar = 10;
          console.log(localVar); // Output: 10
      }
      myFunction();
      // console.log(localVar); // Error: localVar is not defined
    • Block Scope: Variables declared with let and const are block-scoped, meaning they are only accessible within the block (enclosed by {}) in which they are defined.
      if (true) {
          let blockVar = 20;
          console.log(blockVar); // Output: 20
      }
      // console.log(blockVar); // Error: blockVar is not defined

    • Hoisting:
    • JavaScript hoists variable declarations to the top of their scope during compilation, regardless of where the actual declaration is made.
    • console.log(myVar); // Output: undefined
    • var myVar = 10;
    • This code is interpreted as:
    • var myVar;
    • console.log(myVar); // Output: undefined
    • myVar = 10;
    • Mutable vs. Immutable (const):
    • Variables declared with const are not immutable, but their binding (reference) cannot be changed. For primitive data types (like numbers, strings), the value itself cannot be changed. However, for objects and arrays, properties and elements can be modified.
      const PI = 3.14;
      // PI = 3; // Error: Assignment to constant variable.
      
      const person = {
          name: 'John',
          age: 30
      };
      person.age = 35; // Valid

                                                             Data Types:
Primitive Data Types:
1. Number:
    • Represents numeric data.
    • Can be integers, floating-point numbers, or special numeric values like Infinity, -Infinity, and NaN (Not-a-Number).
    • Examples:
      let integer = 10;
      let float = 3.14;
      let infinity = Infinity;
      let nan = NaN;
2. String:
    • Represents textual data.
    • Enclosed in single (') or double (") quotes.
    • Can contain any Unicode character, including escape sequences.
    • Examples:
      let str1 = 'hello';
      let str2 = "JavaScript";
      let escapedStr = 'This is a \'string\'';
3. Boolean:
    • Represents a logical value indicating true or false.
    • Used in control structures and conditional statements.
    • Examples:
      let isTrue = true;
      let isFalse = false;
4. Undefined:
    • Represents a variable that has been declared but not assigned a value.
    • It's the default value of uninitialized variables.
    • Example:
      let x;
      console.log(x); // Output: undefined
5. Null:
    • Represents the intentional absence of any object value.
    • Often used to indicate that a variable has no value.
    • Example:
      let y = null;
Object Data Types:
6. Symbol:
    • Introduced in ES6 (ECMAScript 2015).
    • Represents a unique identifier.
    • Used mainly as object property keys to prevent name clashes.
    • Example:
      const symbol1 = Symbol('symbol1');
      const symbol2 = Symbol('symbol2');
7. Object:
    • Represents a collection of key-value pairs (properties).
    • Used to store various data and functionalities.
    • Examples:
      let person = {
          name: 'John',
          age: 30,
          hobbies: ['reading', 'cooking']
      };
8. Array:
    • Represents a list-like collection of elements.
    • Can hold elements of any data type, including other arrays and objects.
    • Example:
      let numbers = [1, 2, 3, 4, 5];
      let mixedArray = [1, 'two', true];
